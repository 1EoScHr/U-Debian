#The Missing Semester note

##Lec1.Shell & Bash
###基础知识点：  

1. 命令行以空格为分割，所以当命令参数中间有空格时(比如一个文件名)，  
    + 使用引号：`echo "hello world"`  
    + 使用反斜杠转义：`echo hello\ world`  

    这也解释了平时使用时的发现：  
    + ls出来的，是带引号形式  
    + tab补全出来的，是反斜杠转义形式  

2. 命令都存放在`echo $PATH`出来的用:分割的目录里  
    每当打出命令时，都会在这些目录中遍历，直到找到这个命令  
    所以`which xxxx`就是在这些里找到存放位置，只能用来找命令  
    也可以直接根据绝对路径和相对路径到存放每命令的地方执行，如`/usr/bin/echo helloworld`  
    写通用脚本时，对于常见命令，一般不要带路径，直接引用，以免因为存放目录不同而找不到  

3. ~:总指向用户目录 `cd`与`cd ~`会带到/home/xxx里面  
    -:总指向上次所在的目录 `cd -`

4. 命令除过路径，还可以加别的参数，使用方法可以用`--help`引出查看  
    一般的，参数都用`-`或`--`引出  
    参数分为*flag*与*option*，  
    + falg是标志位，后面不加别的，用来启用或禁用某功能，譬如ls命令的`-l`指开启详细输出  
    + option是可选参数，后面要跟有一个值(有时候会有一个默认值)，用于修改命令的默认行为与输出，如ls命令的`-C`，有默认参数，来实现以多列形式输出；`--color`是要启动颜色显示来区分不同文件  

5. `ls -l` 代表详细输出，可以得到的有用信息：  
    + **第一个**：为"d"则是一个目录，为"-"则是一个文件，为"l"则是一个字符连接，此外还有"c""b""s"，用到再看  
    + **下九个**：分3x3三组，代表不同用户的文件权限，依次为*文件所有者*、*拥有文件的用户组*、*非所有者的其他用户*，前两者可以在第二列中看到  
其中，"r""w""x"对于**文件**为*读取*、*写入*、*执行*，对于**目录**为*查看其中内容*、*重命名or新建or删除其中文件*、*搜索or访问目录权*，"-"表示无对应权限  
    + **有趣的点**：如果没有目录的"w"但是有其中一个文件的"w"，最后只能把文件变成空白而不能删除，因为没有目录的"w"权；一个文件只有其所有父目录和自身都拥有"x"权才能被访问  

6. mv 除了**移动路径**，还可顺带**改名**  
    + 用法：mv 现有路径 新路径 (新文件名)  

    同理，cp命令也差不多  
    + 用法：cp 现有路径 目标路径 (目标文件名)  

7. rm ***一定小心使用***  
    + 用法：rm 路径  

    但是rm默认是**不递归的**，也就是说不能删除目录，可以传递一个**-r**的flag来递归的删除  
    还有`rmdir`来专门删除空目录，`mkdir`专门建立新空白目录  

8. 快捷键：ctr+L，清空终端，到最上  

### 进阶：管道